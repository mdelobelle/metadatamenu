{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>This plugin is made for data quality enthusiasts!</p> <p>Access and manage the metadata of your notes in Obsidian.</p> <p>Metadata</p> <p>In Obsidian, metadatas are information defined in Yaml syntax in the front matter section of a note, those metadata are named <code>properties</code>. Metadata are very convenient to categorize notes and make queries to find them. Some plugins have leveraged metadata to make advanced queries against your vault, such as Dataview. Dataview has also introduce a new syntax to define metadata anywhere in a note (not only in frontmatter but also in the body of the note) with the syntax <code>fieldName::value</code></p> <p>Metadata Menu adds context menu items to modifiy target note's frontmatter fields and \"inline fields\" (dataview syntax) by right-clicking on the link, accessing options in the command palette, clicking a dedicated button appearing next to the note in several places or within dataview tables.</p> <p>You can define preset types and values for those fields globally in the plugin's settings or on a file-by-file basis thanks to fileClass definition</p> <p>It also enables frontmatter of inline-field autocompletion with suggested values based on preset values.</p> <p>For a complete walk-through, here is an excellent showcase by Danny Hatcher: complete demo</p> <p>demo 1 : basic features, settings and field types</p> <p>demo 2: autocompletion and \"in sentence\" fields commands</p> <p>demo 3: File type fields</p> <p>demo 4: Date type fields</p> <p>demo 5: Templates for Input type fields:</p> <p>demo 6: FileClass</p> <p>demo 7: Time shifting for spaced repetition or date postponing</p> <p>demo 8: Lookup fields</p> <p>demo 9: Lookup fields as bullet list</p> <p>demo 10: Better Select and File fields</p> <p>demo 11: Supercharged Tags, multi fileClasses and metadata button</p> <p>demo 12: Fileclass View</p> <p>demo 13: Canvas fields</p> <p>demo 14: Create a Kanban board with Canvas Group fields</p> <p>demo 15: Nested fields (Object, Object List, Yaml, JSON)</p> <p>demo 16: Fileclass tableviews</p>"},{"location":"api/","title":"Api","text":"<p>API is accessible with <code>MetadataMenu.api</code></p>"},{"location":"api/#getvalues-deprecated","title":"getValues (deprecated)","text":"<pre><code>getValues(fileOrFilePath: TFile |\u00a0string, attribute: string) =&gt; Promise&lt;string[]&gt;\n</code></pre> <p>Takes a TFile containing the field and a string for the related field name Returns an array with the values of the field. If there are several fields with the same name (in object list fields for example, see Settings), this function will return an array with all the exisiting values</p>"},{"location":"api/#getvaluesforindexedpath","title":"getValuesForIndexedPath","text":"<pre><code>getValuesForIndexedPath(fileOrFilePath: TFile |\u00a0string, indexedPath: string) =&gt; Promise&lt;string&gt;\n</code></pre> <p>Takes a TFile containing the field and a string for the related field's indexedPath</p> <p>Returns the value of the field for this indexedPath</p>"},{"location":"api/#postvalues","title":"postValues","text":"<p>creates or updates fields with values in the target note <pre><code>postValues(fileOrFilePath: TFile |\u00a0string, payload: FieldsPayload, lineNumber?: number, after?: boolean, asList?: boolean, asBlockquote?:boolean) =&gt; Promise&lt;void&gt;\n</code></pre></p>"},{"location":"api/#parameters","title":"parameters:","text":"<ul> <li><code>fileOrFilePath: TFile | string</code> : the target file where to create or update the fields</li> <li><code>payload: FieldsPayload</code>: list of fields and values to create or update (see type definition below and indexed path section of the field settings) </li> <li><code>lineNumber?: number</code> : optional line number where to create fields if it doesn't exist. If the field already exists, this attribute won't do anything. If line number is undefined and the field doesn't exist yet, it will be included in frontmatter</li> <li><code>after?: boolean</code> : optional parameter to create new fields after or before the line number. Defaults to <code>true</code></li> <li><code>asList?: boolean</code>: optional parameter to create new fields as list (insert a <code>-</code> before the field's name) . Defaults to <code>false</code></li> <li><code>asBlockquote?: boolean</code>: optional parameter to create new fields as comment (insert a <code>&gt;</code> before the field's name) . Defaults to <code>false</code></li> </ul>"},{"location":"api/#fieldspayload-and-fieldpayload","title":"<code>FieldsPayload</code> and <code>FieldPayload</code>","text":"<pre><code>export type FieldPayload = {\n    value: string, // the field's value as string\n}\n\nexport type FieldsPayload = Array&lt;{\n    indexedPath: string, //the indexedPath of the field\n    payload: FieldPayload\n}&gt;\n</code></pre>"},{"location":"api/#postnamedfieldsvalues","title":"postNamedFieldsValues","text":"<p>Same as postValues : creates or updates fields with values in the target note. The payload identifies fields based on their names rather than their indexedPath. <pre><code>postNamedFieldsValues: (fileOrFilePath: TFile | string, payload: NamedFieldsPayload, lineNumber?: number, asList?: boolean, asBlockquote?: boolean) =&gt; Promise&lt;void&gt;;\n</code></pre></p>"},{"location":"api/#parameters_1","title":"parameters:","text":"<ul> <li><code>fileOrFilePath: TFile | string</code> : the target file where to create or update the fields</li> <li><code>payload: NamedFieldsPayload</code>: list of fields and values to create or update (see type definition below) </li> <li><code>lineNumber?: number</code> : optional line number where to create fields if it doesn't exist. If the field already exists, this attribute won't do anything. If line number is undefined and the field doesn't exist yet, it will be included in frontmatter</li> <li><code>after?: boolean</code> : optional parameter to create new fields after or before the line number. Defaults to <code>true</code></li> <li><code>asList?: boolean</code>: optional parameter to create new fields as list (insert a <code>-</code> before the field's name) . Defaults to <code>false</code></li> <li><code>asBlockquote?: boolean</code>: optional parameter to create new fields as comment (insert a <code>&gt;</code> before the field's name) . Defaults to <code>false</code></li> </ul>"},{"location":"api/#namedfieldspayload-and-fieldpayload","title":"<code>NamedFieldsPayload</code> and <code>FieldPayload</code>","text":"<pre><code>export type FieldPayload = {\n    value: string, // the field's value as string\n}\n\nexport type NamedFieldsPayload = Array&lt;{\n    name: string, //the name of the field\n    payload: FieldPayload\n}&gt;\n</code></pre>"},{"location":"api/#fieldmodifier","title":"fieldModifier","text":"<pre><code>fieldModifier(dv: any, p: any, fieldName: string, attrs?: { cls: string, attr: Record&lt;string, string&gt; }) =&gt; HTMLElement\n</code></pre> <p>Takes a dataview api instance, a page, a field name and optional attributes and returns a HTML element to modify the value of the field in the target note</p>"},{"location":"api/#filefields","title":"fileFields","text":"<pre><code>fileFields(fileOrFilePath: TFile | string) =&gt; Promise&lt;Record&lt;string, IFieldInfo&gt;&gt;\n</code></pre> <p>Takes a TFile or e filePath and returns all the fields in the document, both frontmatter and dataview fields, and returns a collection of analysis of those fields by metadatamenu:</p> <pre><code>{\n    (indexedPath: string): {\n        /* the value of the field in the file */\n        value: string | undefined, \n\n        /* the fileClass name applied to this field if there is a fileClass AND if the field is set in the fileClass or the fileClass it's inheriting from */\n        fileClassName: string | undefined,\n\n        /* true if this fieldName is in \"Globally ignored fields\" in the plugin settings */\n        ignoreInMenu: boolean | undefined,\n\n        /* true if this field as a setting defined in the plugin settings or a fileClass and if the value is valid according to those settings */\n        isValid: boolean | undefined,\n\n        /* an object containing the options available for this field according to the plugin settings or the fileClass */\n        options: Record&lt;string, string&gt; | undefined,\n\n        /* wether the settings applied to this field come from a fileClass, the plugin settings or none  */\n        sourceType: \"fileClass\"\u00a0|\u00a0\"settings\" |\u00a0undefined,\n\n        /* the type of the field according to the plugin settings or the fileClass  */\n        type: \"Input\" | \"Select\" | \"Multi\" | \"Cycle\" | \"Boolean\" | \"Number\" | \"File\" | \"MultiFile\" | \"Media\" |\u00a0\"MultiMedia\" | \"Date\" | \"Lookup\" | \"Formula\" | \"Canvas\" | \"CanvasGroup\" | \"CanvasGroupLink\" | \"YAML\" | \"JSON\" | \"Object\" | \"ObjectList\"\n\n        /* the unique identifier of the field definition in the vault */\n        id: string\n\n        /* the unique idenfier of the path of this field in this file*/\n        indexedPath: string\u00a0|\u00a0undefined\n    }\n}\n</code></pre>"},{"location":"api/#namedfilefields","title":"namedFileFields","text":"<p><pre><code>namedFileFields: (fileOrFilePath: TFile | string) =&gt; Promise&lt;Record&lt;string, IFieldInfo&gt;&gt;\n</code></pre> Same as fileFields but the key is a \"named indexedPath\" (each field's ID composing the indexedPath is replaced by its name)</p>"},{"location":"api/#insertmissingfields","title":"insertMissingFields","text":"<pre><code>insertMissingFields: (fileOrFilePath: string | TFile, lineNumber: number, boolean, asList: boolean, asBlockquote: boolean, fileClassName?: string) =&gt; Promise&lt;void&gt;\n</code></pre> <p>Takes: - a TFile or its path,  - a line number, - asks wether insertion is in after the line (default : false), - asks wether insertion is as list (prepends <code>-</code>) (default : false), - asks wether insertion is as comment (prepends <code>&gt;</code>)  (default : false), - asks wether insertion should only deal with one single fileClass' fields (default: all)</p> <p>Inserts all missings fields of all (or one specified) fileClass fields at the line, with the format</p>"},{"location":"controls/","title":"Controls","text":"<p>With Metadata Menu, you have several options to control a field: - Autocompletion - Context Menu and command palette - Metadata menu button opening the note's fields modal - Codeblocks - Api</p>"},{"location":"controls/#control-field-with-autocompletion","title":"Control field with autocompletion","text":"<p>In Editor mode, type \":\" after a field in frontmatter, or \"::\" after an inline-field to trigger the autocompletion for <code>Select</code>, <code>Multi</code>, <code>File</code> and <code>Multi File</code> fields</p>"},{"location":"controls/#context-menu-and-command-palette","title":"Context Menu and Command palette","text":"<p>Right click in the live preview, on a link, a file in explorer, or opening a file's or plugin's context menu will display options to manage the note's fields</p> <p>these options are accessible from:</p> <ul> <li>the local menu in the live preview (right-click in the note)</li> <li>the context menu of a link, </li> <li>the context menu of a calendar day, </li> <li>the context menu of a file in the file explorer,</li> <li>the menu of a file</li> <li>the command palette \"Cmd+P\" : Metadata Menu - field options or insert field at cursor or manage field at cursor</li> <li>other context menu (not tested)</li> </ul>"},{"location":"controls/#open-fields-modal","title":"Open fields modal","text":"<p>Will open a modal to manage the fields and fileclasses of this note with a compact UI The order of the fields in the modal will be the order of the fields in the file for existing field and the order of the fields defined in the fileclass fields settings view for missing fields</p>"},{"location":"controls/#manage-fields","title":"Manage Fields","text":"<p>Will open a native Obsidian suggest modal with options available to modify a field or execute the actions mentionned hereafter</p>"},{"location":"controls/#add-a-new-field-at-section","title":"Add a new field at section","text":"<ol> <li>Right-click on the link</li> <li>Click on \"Add field at section\"</li> <li>Select the line in the target file where you want to insert the new field</li> <li>Select the field</li> <li>Use the field's modal to manage the value</li> </ol> <p>NB: if the field type is restricted to the frontmatter section, it will be added at the end of the frontmatter whatever the line chosen</p>"},{"location":"controls/#add-a-new-field-at-cursor","title":"Add a new field at cursor","text":"<p>In live preview, you can add a field at cursor without having to choose the section</p>"},{"location":"controls/#insert-all-missing-fields","title":"Insert all missing fields","text":"<p>When fileClasses are defined for a note, you can bulk insert all fields defined in those fileClasses that aren't yet included in the note</p> <p>You can also insert missing fields on a fileClass per fileClass mode : this option is also available in fileClass sub-menu, or next to fileClasses in the Metadata Menu modal (see Metadata Menu button)</p> <p>Missing fields will be inserted at the specified line number or at the end of the frontmatter if no line is specified. The missing fields will be inserted in the order defined in the fileclass view fields settings</p>"},{"location":"controls/#control-field-from-dataview-tables-with-dataviewjs","title":"Control field from dataview tables with dataviewjs","text":"<p>using <code>fieldModifier</code> function included in metadata-menu API (see # Api), you can build modifiable fields within dataview table</p> <p>fieldModifier takes 4 arguments:</p> <ul> <li>dv: the dataview api</li> <li>p : the page your are currently iterating on</li> <li>fieldName: the name of the field you want to display (as string)</li> <li>attrs (optional): an object with the attributes you want to pass to the field:<ul> <li>cls (optional): the class to be applied to the field</li> <li>attr (optional): the dataview attributes for the field (they will be included as data tags in the HTML rendering of the field)</li> <li>options (optional): an object containing specific options for Metadata Menu field modification</li> </ul> </li> </ul>"},{"location":"controls/#options","title":"options","text":""},{"location":"controls/#alwayson","title":"alwaysOn","text":"<p>with <code>options: {alwaysOn: true}</code> the control for the field will always be displayed</p> <p>with <code>options: {alwaysOn: false}</code> (default) the control for the field won't always be displayed, you'll have to click on an intermediate button or hover the field to display the control</p>"},{"location":"controls/#showaddfield","title":"showAddField","text":"<p>with <code>options: {showAddField: true}</code> if the file has no corresponding field, a \"+\" button will be displayed to select a line in the target file where to add this field</p> <p>with <code>options: {showAddField: false}</code> (default) if the file has no corresponding field, a null value will be displayed</p>"},{"location":"controls/#infrontmatter","title":"inFrontmatter","text":"<p>with <code>options: {inFrontmatter: true}</code> the field will automatically be inserted at the end of the frontmatter of the file if exists. If there's no frontmatter (or wrongly formatted frontmatter), a modal will be displayed to select the section where to insert the field</p> <p>with <code>options: {inFrontmatter: false}</code> (default) a modal will be displayed to select the section where to insert the field </p>"},{"location":"controls/#syntax","title":"syntax","text":"<pre><code>/* dataviewjs block */\n\nconst {fieldModifier: f} = MetadataMenu.api // destruct metadata-menu api to use fieldModifier function and give an alias: \"f\"\n\ndv.table([\"file\", \"Masterization\", \"Tune\"], \n    dv.pages()\n    .where(p =&gt; p.fileClass === \"music\")\n    .map(p =&gt; [\n        p.file.link, \n        f(dv, p, \"masterization\", {options: {alwaysOn: true}}),  // pass dv (dataview api instance), p (the page), the field name to fieldModifier (: \"f\") and an object with options: {alwaysOn: true} so taht the control is always visible\n        f(dv, p, \"tune\") // pass dv (dataview api instance), p (the page), and the field name to fieldModifier (: \"f\")\n        ])\n    )\n)\n</code></pre> <p>Controls will be added to the dataview's table depending on the type of the field.</p>"},{"location":"controls/#globally-update-lookup-fields","title":"Globally update lookup fields","text":"<p>Lookup fields automatically update themselves unless you untoggle their \"Auto-update\" option</p> <p>If you want to force-update this lookup field you can use the command palette command <code>Metadata Menu: Update lookup fields</code></p>"},{"location":"controls/#metadata-menu-button-metadata-menu-modal","title":"Metadata Menu button &amp; Metadata Menu modal","text":"<p>if one or more fileClass / Supercharged tag is defined for a note, you can display a button next to the note reference everywhere in your vault. When clicking this button, a modal will display all fields defined for those fileClasses and their values.</p> <p>From there you can - update a field - insert a field - change the setting of the field in its fileClass - see which field corresponds to which fileClass and the opposite - bulk insert missing fields (for all fileClasses, or or one fileClass in particular)</p> <p>The icon of the button can be customized in the fileClass with the higher priority (see icon )</p> <p>The visibility of the button can be managed in the plugin settings</p>"},{"location":"controls/#codeblocks","title":"Codeblocks","text":"<p>You can display a fileclass table view anywhere with a codeblock:</p> <pre><code>```mdm\nfileClass: &lt;your file class&gt; mandatory\nview: &lt;your saved view&gt; optional\nfiles per page:  &lt;a number&gt; optional\nstart: &lt;a number&gt; optional\nshowAddField: &lt;true of false&gt; optional (false if absent)\n``` \n</code></pre>"},{"location":"controls/#bulk-edit-fields","title":"Bulk edit fields","text":"<p>You can edit a field's value in multiple files at once.</p> <p>From a fileclass table view or a Codeblock: - click on the first column to display checkboxes to select the files where you want to update the field's values - toggling the checkbox of the header row will toggle all the files' checkboxes in the page (depending on where you are in the pagination of your table) - click on the field name (header cell of the table) of the field that you want to update - update the value in the field's modal - a confirmation modal will be displayed showing you the values that will be modified - click on \"confirm\" to update the field's value in the selected files</p> <p>demo</p>"},{"location":"fields/","title":"Metadata Menu fields","text":"<p>Metadata Menu manages fields thanks to fields definition.</p> <p>A field can be identified in serveral sections of a markdown file:</p>"},{"location":"fields/#fields-in-the-frontmatter-section","title":"Fields in the frontmatter section","text":"<p>Called <code>Property</code>in Obsidian, fields in frontmatter are of form: <code>&lt;name&gt;: &lt;value&gt;</code></p>"},{"location":"fields/#fields-in-the-body-section-of-the-file-with-dataview-notation","title":"Fields in the body section of the file with dataview notation","text":"<p>Following Dataview notation, you can define fields:</p> <ul> <li>in the body of the file, occupying the full line <code>&lt;name&gt;:: &lt;value&gt;</code></li> <li>inside a line in the body of the file, surrounded with brackets or parenthesis: <code>... (&lt;name&gt;:: value) ...</code>or <code>... [&lt;name&gt;:: &lt;value&gt;]...</code></li> </ul>"},{"location":"fields/#field-definition","title":"Field definition","text":"<p>In order to give metadata menu the capability to manage a field, you'll have to set a definition for it. You can set a definition for a field in two places:</p> <ul> <li>in the plugin settings: the field definition will be applied to every file of your vault</li> <li>in a fileClass: the field definition will be applied to the files mapped with this fileClass</li> </ul> <p>All fields defintions are composed of:</p> <ul> <li>common settings</li> <li>specific options depending on their type</li> </ul> <p>These options are translated in a field object stored:</p> <ul> <li>as a <code>fields</code> item in the fileClass file for fileclasses fields</li> <li>as a <code>fields</code> item in the <code>data.json</code> file of the plugin's folder for preset fields</li> </ul>"},{"location":"fields/#field-object-structure","title":"Field object structure","text":"key value name field name type field type id unique string automatically generated to identify the field across the vault options specific options by field type path The path of the field in the parent herarchy: - empty or \"\" if the field doesn't have a parent  -  if the field has a parent (e.g. field of type Object or ObjectList) - ____ if the field has a parent that also has a parent - .... any depth level is supported"},{"location":"fields/#indexed-path","title":"Indexed Path","text":"<p>For each field instance in a file, the plugin computes an indexedPath attribute for each existing field in the plugin's index.</p> <p>It is used to identify the field instance in an ObjectList and has to be passed to the <code>id</code> attribute of the postValues method.</p> <p>It is composed of each parent <code>id</code> separated by <code>____</code>, the position in each parent object list next to the parent <code>id</code> between square brackets, and ends with the field's <code>id</code></p> <p>Example of a \"Company\" fileClass fields: |Field name|Type|id|path| |---|---|---|---| |City|Input|HDERA|| |Employees|ObjectList|dx8Mth|| |Name|Input|7r1kwd|dx8Mth| |Role|Input|PCNGE4|dx8Mth| |Contact Info|Object|Y0dsfZ|dx8Mth| |e-mail|Input|hRlSsW|dx8Mth_Y0dsfZ| |phone number|Input|xLPW7T|dx8Mth_Y0dsfZ|</p> <p>Example of computed indexedPath for each field in a file:</p> <p><code>ACME.md</code> <pre><code>---\n#Field                            # indexedPath\nCity: Paris                       # HDERA\nEmployees:                        # dx8Mth\n  - Name: John Doe                # dx8Mth[0]____7r1kwd\n    Role: CFO                     # dx8Mth[0]____PCNGE4\n    Contact Info:                 # dx8Mth[0]____Y0dsfZ\n      e-mail: john.doe@acme.ob    # dx8Mth[0]____Y0dsfZ____hRlSsW\n      phone number: 1234567891    # dx8Mth[0]____Y0dsfZ____xLPW7T\n  - Name: Ann Martin              # dx8Mth[1]____7r1kwd\n    Role: CEO                     # dx8Mth[1]____PCNGE4\n    Contact Info:                 # dx8Mth[1]____Y0dsfZ\n      e-mail: ann.martin@acme.ob  # dx8Mth[1]____Y0dsfZ____hRlSsW\n      phone number: 1234567890    # dx8Mth[1]____Y0dsfZ____xLPW7T\n---\n</code></pre></p>"},{"location":"fields/#fields-types","title":"Fields Types","text":"<p>Metadata Menu can manage several field types. Choose them depending on the kind of data that you want to put in your field:</p> <ul> <li>Input : this is the default type. it will <code>Accept any value</code></li> <li>Boolean: a field that can <code>Accept true or false</code> or null value</li> <li>Number: a field that can <code>Accept a number</code></li> <li>Select: a field that can <code>Accept a single value from a list</code></li> <li>Multi: a field that can <code>Accept multiple values from a list</code></li> <li>Cycle: a field that will <code>Cycle through values from a list</code></li> <li>File: a field that will <code>Accept a link to a file from your vault</code></li> <li>MultiFile: a field that will <code>Accept multiple links</code></li> <li>Media: a field that will <code>Accept a link to a media file from your vault</code></li> <li>MultiMedia: a field that will <code>Accept multiple links to media files</code></li> <li>Date: a field that will <code>Accept a date</code></li> <li>DateTime: a field that will <code>Accept a date with time</code></li> <li>Time: a field that will <code>Accept a time</code></li> <li>Lookup: a field that will <code>Accept a lookup query</code></li> <li>Formula: a field that will <code>Make Calculation based on note's fields</code></li> <li>Canvas: a field that will <code>Update with links in a canvas</code></li> <li>Canvas Group: a field that will <code>Update with groups in a canvas</code></li> <li>Canvas Group Link: a field that will <code>Update with groups links in a canvas</code></li> <li>JSON: a field that will <code>Accept a JSON object</code></li> <li>YAML: a field that will <code>Accept a YAML object</code></li> <li>Object: a field that will <code>Accept a collection of fields</code></li> <li>Object List: a field that will <code>Accept a list of collection of fields</code></li> </ul>"},{"location":"fields/#fields-common-settings","title":"Fields common settings","text":""},{"location":"fields/#field-name","title":"Field name","text":"<p>The name of the field - case sensitive.</p> <p>Metadata menu will search for this name to parse the files mapping the fileclass (if the file is mapping at least one fileclass) or all files if no fileClass is defined unless this field or the files are excluded from indexing</p> <p>A field's name is unique for a given level per fileclass (or within the preset fields)</p>"},{"location":"fields/#parent","title":"Parent","text":"<p>This setting is available if there is at least one Object or Object List field created for this fileclass or in the preset fields</p> <p>Some field types can't have parents (they can't be nested): Lookup, Formula, Canvas, Canvas Group, Canvas Group Link</p>"},{"location":"fields/#set-a-command-for-this-field","title":"Set a command for this field","text":"<p>If toggled, this field will be accessible with Obsidian's command palette.</p> <p>You can set an icon for the button of the command in the mobile toolbar (icon names have to be one of the https://lucide.dev library)</p>"},{"location":"fields/#frontmatter-list-display-type","title":"Frontmatter List display type","text":"<p>Defines the way that multi-value type fields (Multi, MultiFile) are displayed in the frontmatter:</p> <ul> <li>As an array inline: <code>Field: [Value1, Value2]</code></li> <li>As an indented list below the field name:</li> </ul> <pre><code>Field:\n  - Value 1\n  - Value 2\n</code></pre>"},{"location":"fields/#inline-field-style","title":"Inline field style","text":"<p>Inline fields can be automatically styled with four styles (you can mix them):</p> <ul> <li>bold,</li> <li>italic,</li> <li>strikethrough</li> <li>code</li> </ul> <p>NB: the changes to these settings won't affect existing fields. The new style will be applied the next time the field's value has changed</p>"},{"location":"fields/#field-type","title":"Field type","text":"<p>Select the type of the field. The type of the field will define specific controls (buttons, forms, ....) and validation to enter or modify values</p> <p>[!IMPORTANT] once saved, you won't be able to change the type of the field in order to avoid inconsistencies in the indexing.</p> <p>If you really need to change the type of a field, and if you are sure that it won't cause any discrepancies in your data, you'll have to remove this field from the fileclass or the preset fields and create a new one with the same name and the new type.</p> <p>Some types are only available in the frontmatter:</p> <ul> <li>YAML</li> <li>Object</li> <li>Object List</li> </ul>"},{"location":"fields/#nesting-fields","title":"Nesting fields","text":"<p>If the preset fields or a fileclass contains at least one Object or Object List field, then you can nest fields.</p> <p>Nesting a field (A) consists of setting an Object or Object List field (B) as a parent of (A)</p> <p>Each field sharing the same parent will have the same \"level\". If a field has no parent it is considered as \"root\" </p> <p>Field names are unique per level per fileClass, or unique per level in the preset Fields settings</p> <p>Object and Object List field can also have parent, therefore you can nest \"infinitely\"</p>"},{"location":"fields/#input","title":"Input","text":"<p>A basic type to store a string.</p>"},{"location":"fields/#options","title":"options","text":"<p>You can define a template to help fill your <code>Input</code> field.</p> <p>Every item enclosed in curly braces will be transformed into an input or a dropdown select in the field modal. You can modify the \"templatized\" text afterwards:</p> <ul> <li>{{Name}} will be transformed in an input field labeled \"Name\"</li> <li>{{color: [\"red\", \"green\", \"blue\"]}} will be transformed into a dropdown select field labelled \"color\" with 3 value: \"red\", \"green\" and \"blue</li> </ul>"},{"location":"fields/#controls","title":"controls","text":"<ul> <li>Field modal: text area with optional inputs and dropdown selects based ont the tempplate</li> <li>Command palette: open field modal</li> <li>Note modal: open field modal</li> <li>Dataview table: in-cell value modifier</li> </ul>"},{"location":"fields/#boolean","title":"Boolean","text":"<p>A type that accepts <code>true</code> or <code>false</code> values.</p> <p>If the field's value is anything else than <code>true</code>, it will be mapped with <code>false</code></p>"},{"location":"fields/#controls_1","title":"controls","text":"<ul> <li>Field modal: choose value</li> <li>Command palette: toggle value</li> <li>Note Modal: toggle value</li> <li>Dataview table: toggle button</li> </ul>"},{"location":"fields/#number","title":"Number","text":"<p>A type that accepts a number (int or float).</p>"},{"location":"fields/#options_1","title":"options","text":"<p>You can define an optional:</p> <ul> <li>(increment/decrement) step</li> <li>minimum value</li> <li>maximum value</li> </ul>"},{"location":"fields/#controls_2","title":"controls","text":"<ul> <li>Field modal: change value, increment, decrement</li> <li>Command palette: open field modal</li> <li>Note modal: open field modal</li> <li>Dataview table: change value in-cell, increment, decrement</li> </ul>"},{"location":"fields/#select","title":"Select","text":"<p>A type that accepts values from a list.</p>"},{"location":"fields/#options_2","title":"options","text":"<p>You can define several sources for the values:</p> <ul> <li>a note path: each line of the target note will be an option for the dropdown selector</li> <li>a javascript function returning an array of string (dataview api is available with the <code>dv</code> keyword, the dv.current() variable is available with the <code>current</code> keyword)</li> <li>the setting form (add/edit/remove values one by one)</li> </ul>"},{"location":"fields/#controls_3","title":"controls","text":"<ul> <li>Field modal: select value, clear value, add a new value to the settings</li> <li>Command palette: open field modal</li> <li>Note modal: open field modal</li> <li>Dataview table: open field modal</li> <li>Inline value suggestor: choose a value from the list</li> </ul>"},{"location":"fields/#cycle","title":"Cycle","text":"<p>A type that will cycle through values from a list.</p>"},{"location":"fields/#options_3","title":"options","text":"<p>You can define several sources for the values:</p> <ul> <li>a note path: each line of the target note will be an option for the dropdown selector</li> <li>a javascript function returning an array of string (dataview api is available with the <code>dv</code> keyword, the dv.current() variable is available with the <code>current</code> keyword)</li> <li>the setting form (add/edit/remove values one by one)</li> </ul>"},{"location":"fields/#cycle-begins-by-a-null-value","title":"<code>Cycle begins by a null value</code>","text":"<p>When set to true, the value of the field will be set to null if increasing one step after the last value of the list</p>"},{"location":"fields/#controls_4","title":"controls","text":"<ul> <li>Command palette: move to the next value</li> <li>Note modal: move to the next value</li> <li>Dataview table: move to the next value</li> <li>Inline value suggestor: choose a value from the list</li> </ul>"},{"location":"fields/#multi","title":"Multi","text":"<p>A type that multiple values from a list.</p>"},{"location":"fields/#options_4","title":"options","text":"<p>You can define several sources for the values:</p> <ul> <li>a note path: each line of the target note will be an option for the dropdown selector</li> <li>a javascript function returning an array of string (dataview api is available with the <code>dv</code> keyword, the dv.current() variable is available with the <code>current</code> keyword)</li> <li>the setting form (add/edit/remove values one by one)</li> </ul>"},{"location":"fields/#controls_5","title":"controls","text":"<ul> <li>Field modal: select/unselect value(s), clear all values, add a new value to the settings</li> <li>Command palette: open field modal</li> <li>Note modal: open field modal</li> <li>Dataview table: open field modal</li> <li>Inline value suggestor: choose a value from the list, type a comma to add another value...</li> </ul>"},{"location":"fields/#date","title":"Date","text":"<p>A type that accepts a date. </p>"},{"location":"fields/#options_5","title":"options","text":"<p>You can define:</p> <ul> <li>the date format as defined in moment.js library</li> <li>insert link by default: The date will be embedded in an internal link : <code>[[2024-01-01]]</code></li> <li>Link path : if provided, the path will be explicitely included in the internal link : <code>[[Daily/Notes/2024-01-01]]</code></li> <li>Define a shift interval: a value in moment.js duration notation</li> <li>Choose a cycle field belonging to this fileclass or preset fields that contains duration values. Each time you shift the date, the date will be added the current value, and the cycle field will be updated with the next value in the list. This \"Interval field\" can't be a nested field</li> </ul>"},{"location":"fields/#template-for-link-path","title":"Template for link path","text":"<p>You can use templates to build your path with the formating token syntax of moment.js. For example <code>Daily/Notes/{{YYYY}}/{{MM}}</code> will render <code>[[Daily/Notes/2024/01/2024-01-01]]</code>. That can be useful if you have split subfolder for your daily notes for example</p>"},{"location":"fields/#controls_6","title":"controls","text":"<ul> <li>Field modal: input a date, choose a date from a datepicker, insert as link/as raw text, shift ahead</li> <li>Command palette: open field modal</li> <li>Note modal: open field modal</li> <li>Dataview table: open field modal</li> </ul> <p>if the plugin Natural Language Dates is installed, you can use it in the field modal when typing the date in the input field</p>"},{"location":"fields/#datetime","title":"Datetime","text":"<p>A type that accepts a date with time</p>"},{"location":"fields/#options_6","title":"options","text":"<p>You can define:</p> <ul> <li>the time format as defined in moment.js library</li> <li>Define a shift interval: a value in moment.js duration notation</li> <li>Choose a cycle field belonging to this fileclass or preset fields that contains duration values. Each time you shift the date, the time will be added the current value, and the cycle field will be updated with the next value in the list. This \"Interval field\" can't be a nested field</li> </ul>"},{"location":"fields/#controls_7","title":"controls","text":"<ul> <li>Field modal: input a date, choose a date from a datepicker, insert as link/as raw text, shift ahead</li> <li>Command palette: open field modal</li> <li>Note modal: open field modal</li> <li>Dataview table: open field modal</li> </ul>"},{"location":"fields/#time","title":"Time","text":"<p>A type that accepts a time (hours, minutes, seconds, milliseconds)</p>"},{"location":"fields/#options_7","title":"options","text":"<p>You can define:</p> <ul> <li>the date and time format as defined in moment.js library</li> <li>Define a shift interval: a value in moment.js duration notation</li> <li>Choose a cycle field belonging to this fileclass or preset fields that contains duration values. Each time you shift the date, the date will be added the current value, and the cycle field will be updated with the next value in the list. This \"Interval field\" can't be a nested field</li> </ul>"},{"location":"fields/#controls_8","title":"controls","text":"<ul> <li>Field modal: input a date, choose a date from a datepicker, insert as link/as raw text, shift ahead</li> <li>Command palette: open field modal</li> <li>Note modal: open field modal</li> <li>Dataview table: open field modal</li> </ul>"},{"location":"fields/#file","title":"File","text":"<p>A type that accepts an internal link to a file in your vault</p>"},{"location":"fields/#options_8","title":"options","text":"<p>You can define : - a dataviewjs query returning an array of pages - a javascript function to return an alias for each result - a javascript function to sort the results within the query</p>"},{"location":"fields/#dataview-query","title":"<code>Dataview query</code>","text":"<p>It accepts a call to the api function dv.pages that will return pages from your vault according to this function. Dataview api can be accessed with the <code>dv</code> variable, and the current page (dv.page object) is available with the <code>current</code> variable</p> <p>you\u2019ll have to use dv.pages function explained here : https://blacksmithgu.github.io/obsidian-dataview/api/code-reference/#dvpagessource</p> <p>it takes a \u00ab source \u00bb (explained here https://blacksmithgu.github.io/obsidian-dataview/api/code-reference/#dvpagessource):</p> <p>you can also improve the filtering by applying a combination of other functions to the result returned by dv.pages(source):</p> <ul> <li>dv.pages(\u2026).where(\u2026) </li> <li>dv.pages(\u2026).filter(\u2026)</li> <li>dv.pages(\u2026).limit(\u2026)</li> <li>etc</li> </ul> <p>you can combine them:</p> <ul> <li>dv.pages(\u2026).where(\u2026).limit(...)</li> </ul> <p>see documentation here https://blacksmithgu.github.io/obsidian-dataview/api/data-array/#raw-interface</p> <p>A good source of help to build dataview queries is the obsidian discord server &gt; plugin-advanced &gt; dataview : the community is really helpful there.</p> <p>Advanced usage</p> <ol> <li>If you want to suggest only the pages that are defined on a specific field inside your notes, you can write the following:</li> </ol> <pre><code>dv.pages().map(p =&gt; p.field)\n</code></pre> <p>where <code>field</code> is the name of the inline field you want to target. </p> <ol> <li>You can also return an array of links directly from this query. This means that you can retrieve the value of a single field in any of your files.</li> </ol> <p>Example:  <pre><code>dv.page(\"Jules Verne\").books\n</code></pre></p> <p>This would work if you have a file named <code>Jules Verne.md</code> in your vault (its path doesn't matter) that contains an inline field named <code>books</code> filled with one or more links to other pages.</p> <p>For both of the above use cases : - only existing pages will appear in the suggestion - frontmatter fields are not supported</p>"},{"location":"fields/#alias","title":"<code>Alias</code>","text":"<p>It accepts a javascript instruction returning a string using dataview <code>page</code> attribute</p> <p>example: <code>\"\ud83d\ude80\" + (page.surname || page.file.name)</code></p>"},{"location":"fields/#sorting-order","title":"<code>Sorting order</code>","text":"<p>It accepts a javascript instruction returning a number using two files <code>a</code> and <code>b</code></p> <p>example 1: <code>a.basename &lt; b.basename ? -1 : 1</code></p> <p>example 2: <code>a.stat.ctime - b.stat.ctime</code></p>"},{"location":"fields/#commands","title":"commands","text":"<ul> <li>Field modal: select a file, clear the value, type a string to filter the results</li> <li>Command palette: open field modal</li> <li>Note modal: open field modal</li> <li>Dataview table: open field modal</li> <li>Inline value suggestor: choose a value from the list</li> </ul>"},{"location":"fields/#multi-file","title":"Multi File","text":"<p>A type that accepts amultiple internal links to files in your vault</p>"},{"location":"fields/#options_9","title":"options","text":"<p>You can define :</p> <ul> <li>a dataviewjs query returning an array of pages</li> <li>a javascript function to return an alias for each result</li> <li>a javascript function to sort the results within the query</li> </ul>"},{"location":"fields/#commands_1","title":"commands","text":"<ul> <li>Field modal: select/unselect a file, clear the values, type a string to filter the results</li> <li>Command palette: open field modal</li> <li>Note modal: open field modal</li> <li>Dataview table: open field modal</li> <li>Inline value suggestor: choose a value from the list, type a comma to add another value...</li> </ul>"},{"location":"fields/#media","title":"Media","text":"<p>A type that accepts an internal link to a media file in your vault</p>"},{"location":"fields/#options_10","title":"options","text":"<p>You can define :</p> <ul> <li>the folders where your media files are located</li> <li>the embed size for images</li> <li>display the media modal search as list or cards (gallery style)</li> </ul>"},{"location":"fields/#multimedia","title":"MultiMedia","text":"<p>Multiple media files</p>"},{"location":"fields/#lookup","title":"Lookup","text":"<p>A lookup field will look for targetted fields (aka related field) in targetted notes (aka Dataview JS Query results) and display the result in a presistent manner. Unlike a dataview view, a lookup field will change the content of the file by updating the value of the lookup field.  So even if you disable dataview plugin, the lookup field will still contain the value.  Lookup fields can therefore be \"published\".</p>"},{"location":"fields/#lookup-options","title":"<code>Lookup</code> options","text":""},{"location":"fields/#pages-to-look-for-in-your-vault-dataviewjs-query","title":"<code>Pages to look for in your vault (DataviewJS Query)</code>","text":"<p>A DataviewJS query of the form <code>dv.pages(...)</code> that has to return a data array of <code>page</code> object (see Dataview Pages source definition)</p>"},{"location":"fields/#name-of-the-related-field","title":"<code>Name of the related field</code>","text":"<p>The name of the field that the plugin should look for in pages returned by the query. The plugin will filter the results returned by the query with to match the value of the <code>related field</code> with the source note's link</p>"},{"location":"fields/#type-of-output","title":"<code>Type of output</code>","text":"<p>Lookup field can display the result in a very various ways:</p>"},{"location":"fields/#links-list","title":"Links list","text":"<p>Simple list of links of the notes matching the query, comma separated</p>"},{"location":"fields/#links-indented-list","title":"Links indented list","text":"<p>Just like Links list, displayed as a bullet list below the field</p>"},{"location":"fields/#built-in-summarizing-function","title":"Built-in Summarizing function","text":"<p>NB: For this option you'll have to set the name of the target field on which you want to apply the built-in function in the <code>Summarized field name</code> input (not necessary for the <code>CountAll</code> function)</p> <ul> <li><code>Sum</code>: sum of the values of a specific field in the notes returned by the query </li> <li><code>Count</code>: Counts all pages matching the query where the \"Summarized field\" is non empty</li> <li><code>CountAll</code>: Counts all the pages matching the query</li> <li><code>Average</code>: Returns the average value of summarized fields in the pages matching the query</li> <li><code>Max</code>: Returns the maximum value of summarized fields in the pages matching the query</li> <li><code>Min</code>: Returns the minimum value of summarized fields in the pages matching the query</li> </ul>"},{"location":"fields/#custom-list-rendering-function","title":"Custom list rendering function","text":"<p>like the Links option, but you can customize the way each value is displayed. The object <code>page</code> is available (see Dataview page object for all attributes available in the <code>page object</code>) and can be used to build your output. The output has to be a string. </p>"},{"location":"fields/#custom-indented-list-rendering-function","title":"Custom indented list rendering function","text":"<p>Just like the Custom list. Displayed as a bullet list below the field</p>"},{"location":"fields/#custom-summarizing-function","title":"Custom summarizing function","text":"<p>like the Built-in summarizing function option but you can customize the function you want to apply on the data array of pages returned by the query. </p> <p>The <code>pages</code> data array object is available.</p> <p>You have the write the code of the function, this function has to return something.</p> <p>Example1: <code>return pages.length</code></p> <p>Example2: <code>const i=0.0;const sum = pages.reduce((p, c) =&gt; p + c[\"age\"], i); return sum / pages.length</code></p>"},{"location":"fields/#commands_2","title":"commands","text":"<ul> <li>Command palette: update lookup field (if it is not auto-updated)</li> <li>Note modal: update lookup field (if it is not auto-updated)</li> </ul>"},{"location":"fields/#example","title":"Example","text":"<p>If you have a lookup field <code>students</code> defined like this:</p> <ul> <li>name: `students``</li> <li>dataview query: `dv.pages(\"#student\")``</li> <li>Name of the related field: <code>School</code></li> <li>auto-update: true</li> </ul> <p>If you have the following notes</p> <pre><code>John.md\n==========\n#student\nSchool:: [[Princeton]]\n</code></pre> <pre><code>Anna.md\n==========\n#student\nSchool:: [[Princeton]]\n</code></pre> <pre><code>Steve.md\n==========\n#student\nSchool:: [[Princeton]]\n</code></pre> <pre><code>Eric.md\n==========\n#student\nSchool:: [[HEC]]\n</code></pre> <p>if you put <code>students::</code> field in the following files, you'll get the following results <pre><code>HEC.md\n==========\nstudents:: [[Eric]] // auto-filled\n</code></pre></p> <pre><code>Princeton.md\n==========\nstudents:: [[John]], [[Anna]], [[Steve]] // auto-filled\n</code></pre>"},{"location":"fields/#formula","title":"Formula","text":"<p>A field that returns the result of a javascript function</p>"},{"location":"fields/#options_11","title":"options","text":"<p>You can define :</p> <ul> <li>if the field will auto-update each time the content of your vault has changed (can slow down obsidian if you have many of those fields and a lot of files)</li> <li>a javascript function returning a value. (the dataview api is available with th <code>dv</code> keyword, the current dataview page object is available with the keyword <code>current</code>)</li> </ul>"},{"location":"fields/#commands_3","title":"commands","text":"<ul> <li>Command palette: update lookup field (if it is not auto-updated)</li> <li>Note modal: update lookup field (if it is not auto-updated)</li> </ul>"},{"location":"fields/#example_1","title":"example","text":"<p>if you have the field <code>mixed sum</code>defined like this:</p> <ul> <li>name: <code>mixed sum</code></li> <li>auto-update: true</li> <li>javascript formula: <code>current.apples + current.bananas</code></li> </ul> <p>If you put the field <code>mixed sum::</code> in the following file, you'll get the following result <pre><code>basket.md\n=========\napples:: 7\nbananas:: 3\nmixed sum:: 10 // auto-calculated\n</code></pre></p>"},{"location":"fields/#canvas","title":"Canvas","text":"<p>A canvas field of a given note is automatically updated with other notes connected to it in a specific canvas.</p>"},{"location":"fields/#options_12","title":"options","text":""},{"location":"fields/#path-of-the-canvas","title":"<code>Path of the canvas</code>","text":"<p>The path to canvas where you want to search for matching connexions</p>"},{"location":"fields/#nodes-to-target-from-this-note","title":"<code>Nodes to target from this note</code>","text":"<p>The direction of the edge connecting this node with other nodes:</p> <ul> <li><code>Incoming</code>: only the nodes with edges pointing to this node will be triggered</li> <li><code>Outgoing</code>: only the nodes to which this node is pointing will be triggered</li> <li><code>Both Side</code>: every nodes connected to this node will be triggered</li> </ul>"},{"location":"fields/#node-matching-colors","title":"<code>Node matching colors</code>","text":"<p>Only the nodes connected to this node that have a color within the selected values will be triggered. You can define custom color values on top of the 6 default colors available in the canvas</p>"},{"location":"fields/#matching-files","title":"<code>Matching files</code>","text":"<p>You can define a dvJS query that will return files. Only the nodes connected to this node whom corresponding files belong to the dvJS query result will be triggered</p>"},{"location":"fields/#edge-matching-color","title":"<code>Edge matching color</code>","text":"<p>Only the nodes connected to this node with an edge that has a color within the selected values will be triggered. You can define custom color values on top of the 6 default colors available in the canvas</p>"},{"location":"fields/#edge-matching-from-side","title":"<code>Edge matching from side</code>","text":"<p>Only the nodes connected to this node with an edge starting from the selected side values will be triggered.</p>"},{"location":"fields/#edge-matching-to-side","title":"<code>Edge matching to side</code>","text":"<p>Only the nodes connected to this node with an edge pointing to the selected side values will be triggered.</p>"},{"location":"fields/#edge-matching-label","title":"<code>Edge matching label</code>","text":"<p>Only the nodes connected to this node with an edge that has a label within the values list will be triggered. You can remove a label from the list by clicking on the cross in the chip</p>"},{"location":"fields/#add-new-matching-label","title":"<code>Add new matching label</code>","text":"<p>Add new labels to match with edge labels.</p>"},{"location":"fields/#canvas-group","title":"Canvas Group","text":"<p>A canvas group field of a given note is automatically updated with names of matching groups their nodes belong to in a specific canvas.</p>"},{"location":"fields/#options_13","title":"options","text":""},{"location":"fields/#path-of-the-canvas_1","title":"<code>Path of the canvas</code>","text":"<p>The path to canvas where you want to search for matching groups</p>"},{"location":"fields/#group-matching-color","title":"<code>Group matching color</code>","text":"<p>Only the groups surrounding this node that have a color within the selected values will be triggered. You can define custom color values on top of the 6 default colors available in the canvas</p>"},{"location":"fields/#group-matching-label","title":"<code>Group matching label</code>","text":"<p>Only the groups surrounding this node with an edge that has a label within the values list will be triggered. You can remove a label from the list by clicking on the cross in the chip</p>"},{"location":"fields/#add-new-matching-label_1","title":"<code>Add new matching label</code>","text":"<p>Add new labels to match with groups labels.</p>"},{"location":"fields/#canvas-group-link","title":"Canvas Group Link","text":"<p>Combination of the <code>Canvas</code> and the <code>Canvas Group</code> field options. This time, the field will target nodes linked to the groups the node belongs to</p>"},{"location":"fields/#options_14","title":"options","text":"<ul> <li>canvas link options</li> <li>canvas group options</li> </ul>"},{"location":"fields/#json","title":"JSON","text":"<p>A simple JSON field that will be serialized when included as an inline-field, or as a \"JSON in YAML\" when included in the frontmatter. The properties in the JSON are \"free\" meaning that they are not tied to a field definition</p>"},{"location":"fields/#commands_4","title":"Commands","text":"<ul> <li>Field modal: edit the JSON object</li> <li>Command palette: open field modal</li> <li>Note modal: open field modal</li> </ul>"},{"location":"fields/#yaml","title":"Yaml","text":"<p>A simple YAML field. The properties in the YAML are \"free\" meaning that they are not tied to a field definition. This field type is only available in the frontmatter</p>"},{"location":"fields/#commands_5","title":"Commands","text":"<ul> <li>Field modal: edit the YAML object</li> <li>Command palette: open field modal</li> <li>Note modal: open field modal</li> </ul>"},{"location":"fields/#object","title":"Object","text":"<p>A field that acts as a parent for other fields. When created, it will appear in the the \"Parent\" dropdown selector of a field setting. This field is only available in the frontmatter section</p>"},{"location":"fields/#commands_6","title":"Commands","text":"<ul> <li>Field modal: select the nested field to edit and trigger its \"Field modal\" command, add a missing child field to this object</li> <li>Command palette: open field modal</li> <li>Note modal: go to the note modal of this object, listing all children fields and access their commands, add a missing child field to this object</li> </ul>"},{"location":"fields/#object-list","title":"Object List","text":"<p>A field that acts as a parent for other fields. When created, it will appear in the the \"Parent\" dropdown selector of a field setting. This field is only available in the frontmatter section. </p>"},{"location":"fields/#commands_7","title":"Commands","text":"<ul> <li>Field modal: select the nested set of fields to edit and open the corresponding object field modal, add a new item to this object list, remove an item from this object list</li> <li>Command palette: open field modal</li> <li>Note modal: go to the note modal of this object list, listing all items of the list, click on one item to access the Note modal page of the corresponding Object</li> </ul>"},{"location":"fileclasses/","title":"FileClass","text":"<p>Manage preset values based on the context of a file (fileClass)</p>"},{"location":"fileclasses/#what-is-a-fileclass","title":"What is a fileClass","text":"<p>A fileClass is basically a simple file located in the folder defined in the plugin's settings</p> <p>The name of the file will be the name of the class. </p> <p>To map a file of your vault with a fileClass you have several options</p> <p>You can sort your fileClasses in sub-folders. Then if you want to use them in a note, just type their sub-path in the frontmatter of the note: <code>fileClass: &lt;sub-folder&gt;/&lt;sub-sub-folder&gt;/&lt;fileClass name&gt;</code></p> <p>the frontmatter section of this file contains the Fileclass settings and fields definition for this fileClass. The body of this file is not used by the plugin, you can write anything you want in there.</p>"},{"location":"fileclasses/#setup","title":"setup","text":"<ol> <li>Define the folder where you want to store your class files in the plugin's settings</li> <li>Create a note in this folder, let's say <code>music.md</code></li> <li>A button will appear in the tab header of this note. click on it to access the \"fileClass view\" composed of 3 tabs<ul> <li>A table view listing all files that inherit this fileClass</li> <li>A Fileclass Fields views where you can add/change/remove fields definitions for this fileclass</li> <li>A Fileclass Settings view where you can change the settings of the fileclass</li> </ul> </li> </ol>"},{"location":"fileclasses/#file-mapping","title":"File mapping","text":"<p>You have several options to map a file with a fileClass. Those options can be combined to associate multiple fileclasses to a given file. In case 2 fileclasses mapped with the same file have fields with the same name, the field will be mapped according to this priority order: 1. fileClass value in the frontmatter 2. Tag match 3. Path match 4. Bookmark group match 5. fileClassQuery match 6. Global fileClass 7. settings preset fields</p>"},{"location":"fileclasses/#basic-mapping","title":"Basic mapping","text":"<p>include the name of the fileclass in the frontmatter of a note:</p> <pre><code>Bob Dylan.md\n===============================\n---\nfileClass: music\n---\n\nsome cool stuff about Bob Dylan\n</code></pre> <p><code>Bob Dylan.md</code> will be mapped with the fileClass <code>music</code></p> <p>you can set multiple fileClass for a file:</p> <pre><code>Obsidian.md\n==============================\n---\nfileClass:\n  - company \n  - pkm\n---\n\nsome cool stuff about Obsidian\n</code></pre>"},{"location":"fileclasses/#map-with-tag","title":"Map with tag","text":"<p>Include a tag that matches the fileclass and set mapWithTag as true:</p> <p><pre><code>Bob Dylan.md\n===============================\n#music\n\nsome cool stuff about Bob Dylan\n</code></pre> <code>Bob Dylan.md</code> will be mapped with the fileClass <code>music</code></p> <p>Or choose any other tag defined in the tag names</p>"},{"location":"fileclasses/#map-with-folders-path","title":"Map with folder's path","text":"<p>Put your file in a folder that matches one the options defined in Files paths option</p> <p>For example if \"Resources/Music\" is defined in Files paths option, and if Bob Dylan.md is in <code>&lt;Your Vault&gt;/Resources/Music/</code> then it will be mapped with the fileClass <code>music</code></p>"},{"location":"fileclasses/#map-with-bookmark-groups","title":"Map with bookmark groups","text":"<p>Bookmark your file with a bookmark group that matches one the options defined in Bookmark groups options</p>"},{"location":"fileclasses/#map-with-a-query","title":"Map with a query","text":"<p>Set a Fileclass query in the plugin settings and all files included in this query's result will be mapped with the related fileclass</p>"},{"location":"fileclasses/#global-fileclass-mapping","title":"Global fileclass mapping","text":"<p>If the file isn't mapped with a fileclass thanks to the previous options, and if there is a Global Fileclass defined, then the file will be mapped with this global fileclass</p>"},{"location":"fileclasses/#fileclass-settings","title":"FileClass Settings","text":"<p>All fileclass settings are easily configurable in a dedicated view named <code>Fileclass Setting</code>. This view is accessible by clicking the button next to the fileclass name (in the file explorer, in the tab header of the fileclass file, next to the internal link to this file etc...).</p>"},{"location":"fileclasses/#extends-field","title":"<code>extends</code> field","text":"<p>a fileClass can extend another fileClass to benefit of it's fields without having to rewrite them.</p> <p>It may be usefull if you have several fileClass with the same set of fields.</p> <p>For example you may have a fileClass named <code>course.md</code> with some fields like <code>teacher</code>, <code>lecture</code>, <code>grade</code>, <code>type</code>.</p> <p>And you may want to define more specific fields depending on the type of course: a first fileClass <code>mathematics.md</code> with a field <code>chapter</code> and a second fileClass <code>physics.md</code> with a field <code>lecture</code>. For the two of them, you want to benefit from the <code>course</code> fileClass's fields.</p> <p>You can do this very easily by using the <code>extends</code> field in their frontmatter.</p> <p>With our example:</p> <p><code>course.md</code></p> <pre><code>---\nfields:\n  - name: teacher\n    type: Input\n    id: ....\n    path: ....\n    ...\n  - name: grade\n    type: Select\n    options: \n      - \"0\": \"A\"\n      - \"1\": \"B\"\n      - \"2\": \"C\"\n    id: ...\n    path: ....\n  - name: type\n    type: Select\n    options:\n      - \"0\": \"at school\"\n      - \"1\": \"online\"\n      - \"2\": \"personal teacher at home\"\n    id: ...\n    path: ....\n\n---\n</code></pre> <p><code>mathematics.md</code></p> <pre><code>---\nextends: course\nfields:\n  - name: chapter\n    type: Select\n    options:\n      - \"0\": Algebra\n      - \"1\": Geometry\n      - \"2\": Statistics\n    id: ...\n    path: ....\n  - name: to do next\n    type: File\n    options:\n      dvQueryString: \"dv.pages('\\\"Courses\\\"')\"\n    id: ...\n    path: ....\n---\n</code></pre> <p><code>physics.md</code></p> <pre><code>---\n....\nextends: course\n- fields:\n  - name: lecture\n    type: Select\n    options:\n      - \"0\": Mecanics\n      - \"1\": Optics\n      - \"2\": Electricity\n    id: ...\n    path: ....\n---\n</code></pre> <p>All notes with fileClass <code>mathematics</code> or <code>physics</code> will benefit from the fields of <code>course</code> with the same option, but they will have their own fields in addition to it (<code>chapter</code> for <code>mathematics</code>, <code>lecture</code> for <code>physics</code>)</p> <p>A fileClass can also override a field it has inherited from by defining it again.</p> <p>for example:</p> <p><code>physics.md</code></p> <pre><code>---\nextends: course\n- fields:\n  - name: lecture\n    type: Select\n    options:\n      - \"0\": Mecanics\n      - \"1\": Optics\n      - \"2\": Electricity\n    id: ...\n    path: ....\n  - name: type\n    type: Select\n    options:\n      - \"0\": \"at school\"\n      - \"1\": \"online\"\n    id: ...\n    path: ....\n\n---\n</code></pre> <p>the <code>type</code> field in <code>physics</code> will override the one in <code>course</code>. notes with <code>fileClass: physics</code> will have <code>at school</code> and <code>online</code> options for <code>type</code> but not <code>personal teacher at home</code></p>"},{"location":"fileclasses/#excludes-option","title":"<code>excludes</code> option","text":"<p>when defined with an array of values, the field in the array won't be inherited from the parent fileClass</p> <p>With our previous example:</p> <p><code>physics.md</code></p> <pre><code>---\nextends: course\nexcludes: [grade]\n---\n</code></pre> <p>notes with <code>fileClass: physics</code> will inherit <code>teacher</code> and <code>type</code> from <code>course</code> fileClass but not <code>grade</code></p>"},{"location":"fileclasses/#mapwithtag-option","title":"<code>mapWithTag</code> option","text":"<p>when this is set to <code>true</code> all notes including a tag with the same name will benefit from the fields' definitions of this fileclass</p> <p>This works with nested tags as well</p>"},{"location":"fileclasses/#tagnames-option","title":"<code>tagNames</code> option","text":"<p>aliases for your fileClasses</p> <p>when not empty (string or array of string), the tags will be mapped with this fileClass</p>"},{"location":"fileclasses/#files-paths-option","title":"<code>Files Paths</code> option","text":"<p>map path with your fileClasses</p> <p>when not empty (string or array of string), the file with those paths will be mapped with this fileClass</p>"},{"location":"fileclasses/#bookmark-group-option","title":"<code>Bookmark group</code> option","text":"<p>map bookmark with your fileClasses</p> <p>when not empty (string or array of string), the files bookmarked with those bookmark groups will be mapped with this fileClass</p>"},{"location":"fileclasses/#button-icon-option","title":"<code>button icon</code> option","text":"<p>you can customize the icon of the metadata button that gives access to a modal containing all available fields for a note bound with this fileclass</p> <p>the icon names are available from https://lucide.dev</p>"},{"location":"fileclasses/#max-records-per-page-attribute","title":"<code>max records per page</code> attribute","text":"<p>number of rows per page in the fileclass's table view. </p>"},{"location":"fileclasses/#version-attribute","title":"<code>version</code> attribute","text":"<p>Managed by the system</p>"},{"location":"fileclasses/#fileclass-fields","title":"Fileclass Fields","text":"<p>In this view, as in the preset fields settings, you can add, edit and remove fields definition for this fileclass: - \"list plus\" button to add a new field - arrow-up / arrow-down to change the order in which the fields are inserted in a note - \"pencil\" button to edit a field's definition - \"trash\" button to remove a field</p>"},{"location":"fileclasses/#table-view","title":"Table view","text":"<p>This view shows all files mapped with the fileclass. you can modify the fields directly from the table.</p>"},{"location":"fileclasses/#filters","title":"Filters","text":"<p>Type a value in a field's filter, the table will be filtered to only display notes for which this field contains the filter value.</p> <p>You can filter by several values with a comma, the table will be filtered to only display notes for which this field contains one of the filter values</p> <p>For more complex filtering you can type a regex patter such as <code>/Eco|Science/</code>. You'll have to escape backslash, for example: <code>/2023-11-(\\\\d+) Mon/</code>.</p> <p>All columns' field except for the first column (file link) comes with a dropdown selector: - Empty values: will filter to display notes for which the field is in the note, but with no value - Not empty values: will filter to display notes for which the field is in the note, and it has a value - Not found: will filter to display notes for which the field is not in the note - Existing: will filter to display notes for which the field is in the note, whatever the value - field's specific values depending on their type:   - Boolean: true, false. (false won't match undefined or empty fields)   - Select, Multi-Select: the list of predefined values   - File, Multi-File: the list of files matching the predefined query   - Lookups: the list of files currently returned by lookup queries</p> <p>You can also define a custom filtering function in javascript returning a boolean</p>"},{"location":"fileclasses/#sorters","title":"Sorters","text":"<ul> <li>\"saved view\" dropdown select to select a saved view</li> <li>\"star\" button to set or revoke the current view as the favorite view</li> <li>\"eraser\" button to reset the filters and sorting</li> <li>\"save\" button to save the current view</li> <li>\"trash\" button to delete the current view from the saved views</li> <li>\"collapse filter\" button to access more options: sort the table, filter the results, re-arrange columns orders, hide/show columns...</li> </ul> <p>You can define a custom sort by moving up/down the preset values of the field (for File, MultiFile, Select, MultiSelect, Lookup)</p>"},{"location":"fileclasses/#child-classes","title":"Child classes","text":"<p>You can display child classes in the same view by selecting them from the children selector modal</p>"},{"location":"fileclasses/#select-and-save-view","title":"Select and Save view","text":"<p>You can save the sorters/filters of the current view, or choose an existing saved view and define a saved view as favorite to show it when the table view is opened</p>"},{"location":"fileclasses/#rebuild-table","title":"Rebuild table","text":"<p>When there's a change in a fileclass setting or fileclass field, the table view won't be automatically rebuilt. A \"refresh\" button will be highlighted: click on it to rebuild the table to take fileclass changes into account</p>"},{"location":"general/","title":"General Concepts","text":"<p>Metadata Menu can manage any metadata field located in frontmatter (YAML syntax) or in the body of the note with the syntax <code>field::</code> (dataview style, dataview plugin is required) for which a definition (type &amp; options) is set.</p>"},{"location":"general/#field-types","title":"Field Types","text":"<p>Available types are:</p> <ul> <li>Input : this is the default type. it will <code>Accept any value</code></li> <li>Boolean: a field that can <code>Accept true or false</code> or null value</li> <li>Number: a field that can <code>Accept a number</code></li> <li>Select: a field that can <code>Accept a single value from a list</code></li> <li>Multi: a field that can <code>Accept multiple values from a list</code></li> <li>Cycle: a field that will <code>Cycle through values from a list</code></li> <li>File: a field that will <code>Accept a link to a file from your vault</code></li> <li>MultiFile: a field that will <code>Accept multiple links</code></li> <li>Media: a field that will <code>Accept a link to a media file from your vault</code></li> <li>MultiMedia: a field that will <code>Accept multiple links to media files</code></li> <li>Date: a field that will <code>Accept a date</code></li> <li>DateTime: a field that will <code>Accept a date with time</code></li> <li>Time: a field that will <code>Accept a time</code></li> <li>Lookup: a field that will <code>Accept a lookup query</code></li> <li>Formula: a field that will <code>Make Calculation based on note's fields</code></li> <li>Canvas: a field that will <code>Update with links in a canvas</code></li> <li>Canvas Group: a field that will <code>Update with groups in a canvas</code></li> <li>Canvas Group Link: a field that will <code>Update with groups links in a canvas</code></li> <li>JSON: a field that will <code>Accept a JSON object</code></li> <li>YAML: a field that will <code>Accept a YAML object</code></li> <li>Object: a field that will <code>Accept a collection of fields</code></li> <li>Object List: a field that will <code>Accept a list of collection of fields</code></li> </ul> <p>Limitations</p> <p><code>YAML</code>, <code>Object</code> and <code>Object list</code> field types are only available in the frontmatter section</p>"},{"location":"general/#field-definition","title":"Field definition","text":"<p>You can define a <code>field setting</code> for each field.</p> <p>A field setting is composed of:</p> <ul> <li>a name</li> <li>a type (see Field Types list above)</li> <li>options depending on the type</li> </ul> <p>A field setting can defined in:</p> <ul> <li>Metadata Menu settings (see # Metadata Menu Settings)</li> <li>in a fileClass note (see # Fileclass)</li> </ul> <p>Priority management</p> <p>NB: if a field has a setting defined in the Metadata Menu settings AND in a fileClass note, the setting of the fileClass will take the priority over the setting defined in Metadata Menu settings</p> <p>See detailed section settings</p>"},{"location":"general/#controls","title":"Controls","text":"<p>a Field can be modified or added from several locations:</p> <ul> <li>autocompletion within the editor mode</li> <li>Obsidian and plugins menus : file explorer, note, calendar, context menu of a link, many other plugins not fully tested ...</li> <li>dataview table if you have dataview plugin installed</li> <li>the Metadata Menu button appearing next to each note's name (file explorer, tab header, link....)</li> <li>the tableview of a fileclass view</li> <li>a Metadata Menu code block</li> </ul> <p>See detailed section controls</p>"},{"location":"releases/","title":"0.8.0","text":"<p>Edit a field's value in multiple files at once Customize the display value of Object, ObjectList and ObjectList items fields</p>"},{"location":"releases/#077","title":"0.7.7","text":"<p>fix multi file fields broken when some file names include a comma</p>"},{"location":"releases/#075","title":"0.7.5","text":"<p>fix mobile date and time picker</p>"},{"location":"releases/#074","title":"0.7.4","text":"<p>fix nested object fields</p>"},{"location":"releases/#072","title":"0.7.2","text":"<p>Native date picker New Datetime field type New Time field type</p> <p>Better management of Number field increment and decrement</p>"},{"location":"releases/#071","title":"0.7.1","text":"<p>\u2195\ufe0f Change the order of fields for fileClasses in the field settings tab to apply on: - Missing fields insertion - MDM icon modal fields order (if the note has already fields in it, the order of the fields in the note will have higher priority over the settings order) - Fileclass tableview columns default order - MDM Code block columns default order</p> <p>\ud83e\ude79 Fixed: Insert missing fields not inserted in reverse order anymore</p>"},{"location":"releases/#070","title":"0.7.0","text":""},{"location":"releases/#new-types-media-and-multimedia","title":"New types: Media and MultiMedia","text":"<p>Like <code>File</code> and <code>MultiFile</code> field type but for non <code>.md</code> files Select the folder to search your media files Choose an embed size for images Choose a gallery or list mode for Media modal search</p>"},{"location":"releases/#improved-field-settings","title":"Improved field settings","text":"<p>Better field type selector Better field parent selector</p>"},{"location":"releases/#api-method","title":"Api method","text":"<p><code>postValues</code>: <code>id</code> argument has been replaced by <code>indexedPath</code> to match the field setting definition <code>postNamedFieldValues</code>: create or modify fields by name (instead of indexedPath). Easier to manipulate but less precise in case of multiple fields having the same name</p>"},{"location":"releases/#0611","title":"0.6.11","text":"<p>Performance improvements:</p> <p>Table views and MDM code blocks won't include \"insert field\" buttons by default anymore to increase speed. new \"Show inser field\" Button in table view to display insert fields buttons new \"showAddField\" option in mdm code block, set it to showAddField: true to display insert fields in display insert buttons in the table Table view rebuild has been optimized so as not be triggered automatically When there's a change in a fileClass, a refresh button will be highlighted in the table view. Click on it to rebuild the table</p>"},{"location":"releases/#0610","title":"0.6.10","text":"<p>Performance improvement for codeblocks and tableviews</p>"},{"location":"releases/#metadata-menu-069","title":"Metadata Menu 0.6.9","text":"<p>complete walk-through by Danny Hatcher : https://www.youtube.com/watch?v=qi4Uz7TZLOM</p>"},{"location":"releases/#improvement","title":"Improvement","text":"<ul> <li>code block for fileclass table view</li> <li>fileclass view reopening at start</li> <li>existing saved view can now be modified</li> <li>choose fileclass at filecreation</li> <li>add fileclass to file command</li> <li>global formula and lookup auto-calculation toggler in settings</li> <li>fileclass default icon refactoring</li> <li>extend fileclass views with child fileclasses</li> </ul> <p>syntax for codeblock:</p> <pre><code>```mdm\nfileClass: &lt;your file class&gt; mandatory\nview: &lt;your saved view&gt; optional\nfiles per page:  &lt;a number&gt; optional\nstart: &lt;a number&gt; optional\n``` \n</code></pre>"},{"location":"releases/#fix","title":"Fix","text":"<ul> <li>formula not updating on click</li> <li>single char field not parsed</li> </ul>"},{"location":"releases/#067","title":"0.6.7","text":"<p>Fix for icon in table view</p>"},{"location":"releases/#metadatamenu-066","title":"\ud83d\udcc6 MetadataMenu 0.6.6","text":"<p>I should have named this plugin with a shorter name \ud83d\ude05. I'll abbreviate it to MDM below</p>"},{"location":"releases/#improvements","title":"improvements","text":"<ul> <li>linkPath for datefield accepts a template: You can use templates to build your path with the formating token syntax of moment.js . For example <code>Daily/Notes/{{YYYY}}/{{MM}}</code> will render <code>[[Daily/Notes/2024/01/2024-01-01]]</code>. That can be useful if you have split your daily notes by subfolders for example</li> <li>MDM icon displayed before the link in tables</li> <li>map fileClass with folder now matches subfolders</li> </ul>"},{"location":"releases/#fix_1","title":"Fix","text":"<ul> <li>MDM icon show up for fileClass links in preview mode</li> <li>click on a link in the fileClass table view now includes the full path to open the file</li> <li>file links in canvas field now correctly rendered in frontmatter</li> </ul>"},{"location":"releases/#065","title":"0.6.5","text":"<p>Improvements: - Fileclass table view: Each filter now comes with a value selector with values depending on the type of the field - Fileclass table view: Filters now accept regex pattern - Fileclass table view: Page ranges are folded when there are too many pages ranges resulting in a cluttered view - Date field: new command to clear the value of the field. Bug fix when the date entered wasn't parsed by natural language dates plugin - Boolean fields: less ambiguous icon to toggle the value of the field</p> <p>Fix: - dataview first index not causing competing queries recalculation anymore - slash command not working at start</p>"},{"location":"releases/#064","title":"0.6.4","text":"<p>Improvements - replaced \"add new field\" by \"insert missing field\" in fields options - enable overriding field name in children fileclasses - fileClass add button is now bound to \"show button in file explorer\" setting</p> <p>Performance - queries resolution are made asynchronously - new setting to scope the plugin to the frontmatter only - removed values indexing</p> <p>Fix - input field with templates not broken when overriding text</p>"},{"location":"releases/#063","title":"0.6.3","text":"<p>Fixes - btn in property section for IPadOS - updateFormulas and updateLookups not recalculating at start anymore \u2192 improves launch time - dvField for date not broken anymore</p>"},{"location":"releases/#062","title":"0.6.2","text":"<p>New display for formula field errors: the icon will be displayed in red instead of a Notice popping up</p>"},{"location":"releases/#061","title":"0.6.1","text":"<p>New Fields types: - JSON - YAML (frontmatter only) - Object (collection of fields) enabling nested fields in frontmatter - Object List (list of collection of fields) enabling nested fields in frontmatter - All fields can define a \"Parent\" in their setting among the Object or ObjectList fields defined for the fileclass (or globally in the settings)</p> <p>example 1 : Object field <pre><code>---\naddress:                 # Object field\n  street: avenue Foch    # Input field with &lt;address&gt; as parent field\n  number: 40             # Number field with &lt;address&gt; as parent field\n  city: \"[[Paris]]\"      # File field with &lt;address&gt; as parent field\n---\n</code></pre></p> <p>example 2 : Object List field <pre><code>---\nplayers:                 # ObjectList field\n  - name: Mathieu        # Input field  with &lt;players&gt; as parent field\n    grade: beginner      # Select Field  with &lt;players&gt; as parent field\n  - name: Jules          # Input field (the same definition as above)\n    grade: advanced      # Select Field (the same definition as above)\n---\n</code></pre></p> <p>example 3: Mixing ObjectList and Object <pre><code>---\nplayers:                     # ObjectList field\n  - name: Mathieu            # Input field   with &lt;players&gt; as parent field\n    grade: beginner          # Select Field  with &lt;players&gt; as parent field\n    address:                 # Object field  with &lt;players&gt; as parent field\n      street: avenue Foch    # Input field with &lt;address&gt; as parent field\n      number: 40             # Number field with &lt;address&gt; as parent field\n      city: \"[[Paris]]\"      # File field with &lt;address&gt; as parent field\n  - name: Jules              # Input field (the same definition as above)\n    grade: advanced          # Select Field (the same definition as above)\n    address:                 # Object field (the same definition as above)\n      street: av de la paix  # Input field (the same definition as above)\n      number: 25             # Number field (the same definition as above)\n      city: \"[[Paris]]\"      # File field (the same definition as above)\n---\n</code></pre></p> <p>Fileclass: - globally Exclude folders from fileClass mapping - map a fileclass with folders in your vault (associate their path in the fileclass setting view) - map a fileclass with bookmark groups in your vault (associate their path in the fileclass setting view) - exclude folders, extensions, regex from indexing - Fileclass creation: button next to the fileclass folder to facilitate the fileclass creation (removes 2 steps) - open fileclass settings after fileclass creation (removes 4 steps) - Button to directly Insert missing fields in frontmatter from the metadata menu modal (removes 1 step) - fileclass table views can be sorted by multiple columns by order, their column can be ordered and hidden. Your custom filtering/sorting/column arrangement can be saved in a \"saved view\". You can define a favorite saved view that will show up when hitting the fileclass icon - field modifier for object and objectlist fields in dataview tables</p> <p>Commands and Menus: - removed the \"per field\" options in the menu - added an \"Index Metadata Menu fields\" command to force-reindex in case some data is incosistent in the modals - Two way to nagivate in the  - Metadata menu commands in the property section (with an option to deactivate it) - fields modal can be called in properties section (manage field at cursor)</p> <p>Others: - manage lookup field manual change (manually changed fields are skipped in update lookups so as not to be overwritten</p> <p>Indexing: - new indexing mecanism - independent from dataview and obsidian - new index status in the status bar showing a rotating icon when the plugin is indeing data (meaning some values could be not up to date until the indexing is finished) - the index status shows if there are Formulas or Lookup that have changed in a note and that haven't been automatically updated (when autoupdate is set to false in their setting). click on the icon to update all formulas and lookups in this note - the metadatmenu button is displayed in a specific color (--text-warning) if there are Formulas or Lookup that have changed in a note and that haven't been automatically updated (when autoupdate is set to false in their setting). click on the index status icon to update all at once or open the Note Fields Modal to update them one by one </p> <p>\ud83e\uddf9deprecated functions - api : insertValues - api : replaceValues</p>"},{"location":"releases/#052","title":"0.5.2","text":"<p>\ud83d\udd11 Metadata Menu 0.5.2 Should work as expected along with Properties core plugin</p> <p>Improvement \ud83c\udfa8  Ability to Format the field name when inserting as an inline field (dataview)</p> <p>Fix \ud83d\udd27 Metadata menu form, set/update not longer displays duplicates \ud83d\udd27 Fixed input field for null value with number field, now interpreted as 0 so as to enable increment and decrement more easily.</p>"},{"location":"releases/#050","title":"0.5.0","text":"<p>I've released Metadata menu 0.5.0  It should work fine with obsidian 1.4.0</p>"},{"location":"releases/#0418","title":"0.4.18","text":"<p>\u2603\ufe0f Metadata Menu 0.4.18 comes with lots of improvements</p> <p>\ud83d\udcf1 The note's field modal and the fileClass view display has been improved for mobile screens \ud83d\udd25 Support for advanced suggestions for file fields (thanks a lot @Krakor ). Read the documentation for more details https://mdelobelle.github.io/metadatamenu/settings/#dataview-query \ud83e\udd15 Fixes for frontmatter autocomplete: single Select Field are no longer displayed as indented list \ud83d\udcc6 Date display in the note's fields modal has been fixed for dates displayed as text</p>"},{"location":"releases/#0411","title":"0.4.11","text":"<p>\ud83d\ude91 Metadata Menu 0.4.11 Is out with some improvements</p> <p>\ud83e\ude79 Auto suggester in frontmatter has been revamped \ud83e\uddf9 Empty fields in frontmatter are displayed as blank instead of \"null\" \ud83d\udc8a You can choose to display your values as arrays or indented lists in frontmatter globally or per field \u270f\ufe0f You can toggle on/off auto suggester globally in the plugin settings</p>"},{"location":"releases/#046","title":"0.4.6","text":"<p>\ud83c\udf1dMetadata Menu 0.4.6 : Canvas Group Links fields</p> <p>\ud83d\udd17 Canvas Group Link fields combine Canvas field and Canvas Group field: They will be updated with the links to node's files that are linked to matching groups (instead of group names given by Canvas Group fields). Use case: Use file nodes as kind of tagging for groups (see the picture for more clarity) Documentation here: https://mdelobelle.github.io/metadatamenu/settings/#canvas-group-link-options</p> <p>\ud83e\udd3f Subpath for Canvas fields: when a file node is narrowed to a header, the link returned in the canvas field contains the full path#sub-path</p> <p>\ud83d\udc2d Input, Date and Number field modal improvement: type Enter will validate the field (faster than clicking the check button)</p>"},{"location":"releases/#045","title":"0.4.5","text":"<p>\ud83c\udf89Happy new year everyone.  Metadata Menu 0.4.5 brings a bunch of fixes for bugs that appeared with version 0.4.0 (due to new way of managing frontmatter). No longer broken:</p> <pre><code>Mobile version of the plugin is no longer broken\nIndented lists in frontmatter (no more empty values, no more cursor returning at the beginning of the line after selecting an autosuggested value)\n</code></pre> <p>Improvements:</p> <pre><code>an extra space is added after inline fields separator :: when selecting a value from a modal\na notice will popup at the plugin launch if the dataview plugin isn\u2019t installed and enabled.\n</code></pre> <p>Some unexpected behavior with autosuggest in frontmatter may still appear. Don\u2019t hesitate to file an issue in github: we\u2019ll find \u00b4em all</p>"},{"location":"releases/#041","title":"0.4.1","text":"<p>\ud83e\udea9 Metadata Menu 0.4.1 has been released. It brings more capabilities and more fun with metadata and canvas combination.</p> <p>\ud83d\udce5 Introducing Canvas Group fields : Update your metadata based on groups in canvas, those fields will get updated with the names of groups matching specific conditions (color, label) their nodes belong to. See it in action in this tutorial to create a simple Kanban canvas: https://youtu.be/G47AYkmoKJs </p>"},{"location":"releases/#040","title":"0.4.0","text":"<p>\ud83c\udf84 Metadata Menu 0.4.0 is out</p> <p>\u2728 Introducing Canvas fields : Bind your metadata with canvas nodes and edges, those fields will get updated with the file links matching nodes' and edges' conditions (color, side, direction, and more). demo here: https://youtu.be/7oaau8ijVUA, documentation here: https://mdelobelle.github.io/metadatamenu/settings</p> <p>\ud83c\udf85\ud83c\udffb updating fields in frontmatter is now compliant with obsidian core standard: multiple values will be displayed as indented lists in yaml syntax.</p> <p>\ud83c\udf81 Links in frontmatter are surrounded with double quotes: ready for dataview and frontmatter links</p> <p>\ud83e\ude93 replaceValues and insertValues api methods are deprecated and will be removed in the next version. They are replaced by postValues that will create or update values</p> <p>\ud83d\udef7 many changes under the hood to improve speed for fields indexing. As usual, some bugs may have not been identified, don't hesitate to open issues in github </p>"},{"location":"releases/#037","title":"0.3.7","text":"<p>Metadata Menu 0.3.7 has been released \ud83e\uddda\ud83c\udffb</p> <p>\ud83e\udd81 The Fileclass View has been improved. You have now 3 tabs:</p> <pre><code>A table view listing all notes with this fileClass or supercharged tag where you can now paginate the table, sort it, filter it.\nA field view listing all the fileClass fields where you can change their settings, remove or add a field\nA settings view where you can preset the records per page for the table view, the icon for the metadatamenu button for this fileClass, map it with tags and set tag aliases, set a parent fileClass and exclude fields\n</code></pre> <p>demo here: https://youtu.be/3jukvV7OODg \ud83d\udc18 You can now click on the link in the fileClass table view, it will open the note in a new tab \ud83e\udd85 Manage field at cursor now automatically toggles boolean fields and move cycle fields forwards \ud83e\udd93 Bug fixes: MultiSelect display in dataview table with some links in it. FileClass table view not showing note with more than one fileClass</p>"},{"location":"releases/#036","title":"0.3.6","text":"<p>Metadata Menu 0.3.6 \ud83e\ude90 \ud83d\udd2d fileClass and supercharged Tags table view: Display a dataview table of all notes with a given fileClass or supercharged tag, and gives the capability to modify them directly from the table. This is accessible from command palette \"Open fileClass view\" (you can set hotkey for it), or from the context menu of a file (in the sub menu of a fileClass)</p> <p>\ud83c\udfad Aliases for supercharged tags: you can bind a fileClass with any tag you want by setting tagNames: [tag1, tag2, ...] in the frontmatter of the fileClass. If there's no tagNames, the fileClass will be mapped with the tag of the same name (thanks @MMoMM.org for the idea)</p> <p>\ud83c\udfb9 Command palette to insert a specific field in the note (therefore you can set a hotkey to insert your favorite fields) (thanks @Miro_Kee  for the idea)</p> <p>\ud83c\udfa8 Complete refactoring of the styling to better match the native UI of obsidian. \ud83d\udee0 Fixed date field with linkPath equal to the root folder (thanks davidbench for the PR) \ud83d\udee0 Fixed broken links in docs (thanks @bri (they/m) ) \ud83d\udee0 Fixed insertValue api method bug when the note has no frontmatter \ud83e\uddf9 Code cleaning. in case something is broken, don't hesitate to open an issue on github</p>"},{"location":"releases/#034","title":"0.3.4","text":"<p>\ud83c\udf83 Metadata Menu 0.3.4 is out \ud83e\uddd9\ud83c\udffb\u200d\u2642\ufe0f Command and API method to bulk insert missing fields in a note (fields defined for fileClasses / supercharged tags associated to this note). doc here https://mdelobelle.github.io/metadatamenu/api/#insertmissingfields \ud83d\udc7b Formula field : make automatic calculation based on your note's fields. demo here: https://youtu.be/LqglkrzLAoQ \ud83d\udd77 Performance improvement: lookup field are way more efficient now. You can even set them to not-auto-update (freeze the results and update them on-demand)</p>"},{"location":"releases/#033","title":"0.3.3","text":"<p>\u2600\ufe0f Metadata Menu 0.3.3 Thanks a lot for all your nice feedbacks about v0.3.0 and your ideas to improve supercharged tags. In v0.3.3 you will find:</p> <pre><code>\ud83e\udeba Support for nested fileClasses and supercharged tags\n\ud83d\udcda Bulk insert fields in a note from the context menu or the metadata menu button : insert fields available from all fileClasses / supercharged tags defined, or on a fileclass-per-fileclass mode\n\ud83d\udd27 Some field indexing performance improvement for large vaults (WIP)\n</code></pre>"},{"location":"releases/#030","title":"0.3.0","text":"<p>\u2604\ufe0fMetadata Menu 0.3.0</p> <p>\ud83d\udcaa\ud83c\udffb Note Supercharged tags: Bind tags with fileClass definition. When you put a supercharged tag anywhere in a note, all fields defined in its fileClass definition are available for this note. \ud83d\udc23 Create a supercharged tag: from existing or not yet exisiting tags \ud83d\udc36\ud83e\udd81\ud83d\ude97\ud83d\uddfa\ufe0f Add multiple fileClass and supertags per note: combine fileClass, supercharged tags and fileclass queries to finegrain which metadata fields are available for your note.There's a priority management If the same field is defined in serveral fileclasses. \ud83d\udccbNew Note's metadata fields form: access all available metadata fields for your note in a single form where you can easily:</p> <pre><code>insert  a field\nupdate a field\nsee which fileclass/supertag the field belongs to\nchange the field settings\nadd a new field definition to one of the supercharged tag/fileclass of this note (it will therefore be available for other notes sharing the same supercharged tags and fileclasses)\n</code></pre> <p>\u2728 new Note's metadata button will be added right next to the note's link/tab header/... to access the note's metadata form without opening the note or navigating in the context menu.  \ud83d\udc68\ud83c\udffb\u200d\ud83c\udfa8 The Note's metadata button icon can be customized in the fileClass definition (from lucide.dev icons set). You can customize where these buttons are displayed or hidden in the settings.  \ud83e\udd1dWhen used in combination with the Supercharged links plugin, you get a great understanding of what a note is about and great ease to manipulate its metadata from anywhere in your vault. \ud83d\udcccBetter UX for section choice  for \"add a field at section\" command. \ud83d\udd27Lots of under-the-hood optimization, so if anything doesn\u2019t work as expected, don't hesitate to open an issue in github.</p>"},{"location":"releases/#0211","title":"0.2.11","text":"<p>Metadata Menu 0.2.11 is available:</p> <p>\ud83d\udcf6 File and MultiFile fields suggester modals are now sorted alphabetically and you can customize the sorting order (by creation time, reverse order, ...)</p>"},{"location":"releases/#029","title":"0.2.9","text":"<p>\ud83e\ude85 Metadata Menu 0.2.9 with many QOL improvements \ud83c\udfd6</p> <p>Improve your File and MultiFile fields with aliases \ud83c\udfad  Improve your Select and MultiSelect fields with a note of values \ud83d\udcdd  Add missing values to settings from the field modal \ud83d\ude2c  Create a custom values list with a dataview query \ud83e\udd13 </p> <p>\u2699\ufe0f lots of \"under the hood\" improvements. Don't hesitate to create an issue on github in case of weird behavior</p>"},{"location":"releases/#027","title":"0.2.7","text":"<p>\u2728 Metadata Menu 0.2.7</p> <p>\ud83d\udd0e Display lookup fields as bullet list below the field. As a reminder: the lookup field is automatically updated when one of the target note is modified, just like a dataview view, but as genuine markdown. This may be useful to automatize your Maps Of Content (MOC) for example</p>"},{"location":"releases/#020","title":"0.2.0","text":"<p>\ud83c\udf8a Metadata Menu 0.2.0 is live with new exciting stuff</p> <p>\ud83d\udd0e Lookup fields: they are like Dataview inline expressions (flexible and automatically updated) but persistent. The new calculated value is replaced in your note and therefore is just regular text. Check the documentation (https://mdelobelle.github.io/metadatamenu/settings/#lookup-options) https://youtu.be/ad0nJf8TZP8</p> <p>\ud83d\uddb1Select fields: you can now add new values to the settings for your Select fields (and multi select) directly from the modal when typing a value that is not yet in the suggestions. The focus as also been improved: you can 100% use Select fields with your keyboard now!</p> <p>\u2699\ufe0f core engine: the plugin has been improved so as to be fully synchronous thanks to an internal index. Even if it's been tested, there may be some edge cases that I didn't catch, don't hesitate to open a bug in Github. As a result, fieldModifier for Dataview tables are easier to write (they no longer require Promise, async, await instructions). See the documentation</p>"},{"location":"releases/#0134","title":"0.1.34","text":"<p>Metadata Menu 0.1.34 \ud83d\udc23 \u231a introducing timeshifting: you can now set shift intervals to push Date fields in the future.  This may be useful for spaced repetition in your knowledge management workflow or to postpone dates in your project management workflow</p>"},{"location":"releases/#0131","title":"0.1.31","text":"<p>Metadata Menu 0.1.31 \ud83c\udfaf New command: Manage fields at cursor.  This command is accessible from right-click or from command palette (you can assign a hotkey). Updating fields within a note gets faster and your notes get a little bit closer to forms!</p>"},{"location":"releases/#0128","title":"0.1.28","text":"<p>Metadata Menu 0.1.28 \ud83d\ude0e * \ud83d\uddc2 MultiFile field type is now available: select multiple files from your vault (optionally matching a dataview query) * \ud83d\udcccNative suggest modal for multiple values selection (for MultiFile and MultiSelect types)</p>"},{"location":"releases/#0127","title":"0.1.27","text":"<p>Metadata Menu 0.1.27: Manage metadata inside callouts</p>"},{"location":"releases/#0122","title":"0.1.22","text":"<p>Hi! Metadata Menu 0.1.22 is live \ud83c\udf89 Access your metadata by \"right-clicking\" in live preview.  Field options are also sorted in a sub menu: your context menus are therefore much shorter and better organized. I've also migrated the documentation in github pages: https://mdelobelle.github.io/metadatamenu/</p>"},{"location":"releases/#0119","title":"0.1.19","text":"<p>Hi! Metadata Menu 0.1.19 is live with many new features and QOL improvements. (thank you for your feature requests, they gave me many ideas for this version) \ud83e\udd73 UI improvements: native icons, suggesters instead of dropdown to select and insert fields, better focus in field modals. You should be able to manage your fields without your mouse or arrow keys. Metadata management has become blazzing fast. There's a \"template\" option for Input fields to help you fill them: each {{attribute}} will be converted in a dedicated input or dropdown and the input will be filled with the rendered template. See demo 5 in documentation \"Input Fields with template\" You can now associate a fileClass with a dataview query: for every file matching the query, the fields settings (type, options...) will be managed by the given fileClass. Usefull to have every file in a folder, or with certain tags, to be applied a fileClass without having to clutter your frontmatter with fileClass attribute. See documentation and especially demo 6 in documentation for full demonstration of fileClass </p>"},{"location":"releases/#0115","title":"0.1.15","text":"<p>Metadata Menu 0.1.15 \ud83d\udd25\ud83d\ude80 Add a field directly from a dataview table cell.</p>"},{"location":"releases/#0114","title":"0.1.14","text":"<p>Metadata Menu 0.1.14 \ud83c\udf89 \ud83d\udcc6You can now manage Date fields in your metadata: - insert or modify a date in frontmatter or inline field with a date picker or in natural language (thanks to Natural Language Date plugin) - insert dates as link or string - control dates directly from a dataview table</p>"},{"location":"releases/#0111","title":"0.1.11","text":"<p>Metadata Menu 0.1.11 is live \ud83e\udd73. There's a new field type available: File File fields will be populated with a link to a file in your vault. The selection of this link is facilitated by a dedicated file suggester. You can also set an optional dataview query to specify which links should be available for this field \ud83e\udd13</p>"},{"location":"releases/#019","title":"0.1.9","text":"<p>all commands including field autocompletion now work for -   \"in-sentence fields\" (dataview style [field:: value]) - even within task -   in list fields (- field:: value) -   styled fields (field:: value...)</p>"},{"location":"releases/#015","title":"0.1.5","text":"<p>\ud83d\udca1 Types : Metadata Menu can now manage more field types: Number, Boolean, standard Input, Select from list, Multi select from list and Cycle from list.</p> <p>\ud83d\udd27 Settings : Field types and options can be defined with a unified UX from the plugin settings or from fileClass fields defiinition.</p> <p>\ud83d\udd0e Dataview : You can benefit from specific controls to modify your fields depending on their types directly from your dataview table \ud83c\udf89</p> <p>\u2195\ufe0f The new Number type can be set with a step option (for increment and decrement feature), a min and a max options for field validation</p> <p>This version comes with a significant refactoring and despite the tests some bugs may remain \ud83d\ude48. don't hesitate to open an issue in github.</p>"},{"location":"releases/#013","title":"0.1.3","text":"<p>\ud83c\udf89 Boolean is now a new supported type in metadatamenu Boolean fields can be defined either globally in settings (preset fields) or for a given fileClass From there you can - toggle boolean fields from context menu - define a fieldModifier in a dataview table and toggle your boolean field directly from the checkbox in your table \u2705</p> <p>\u26a0\ufe0f fieldWithMenu (introduced in 0.1.1) has been replaced by fieldModifier (see Readme)</p>"},{"location":"releases/#011","title":"0.1.1","text":"<p>Modify target file's fields directly from a dataview table (limited to tables created with dataviewjs). See read.me for \u00ab how to \u00bb.</p>"},{"location":"releases/#010","title":"0.1.0","text":"<p>Metadata Menu v0.1.0 is available with styling improvements for modals by @SlRvb (thanks a lot) and an first API (see Readme for details) It also comes with a lot of code cleaning and refactoring. Not everything is properly tested \ud83d\ude48 so don\u2019t hesitate to open issues if something is broken.</p>"},{"location":"settings/","title":"Metadata Menu settings","text":""},{"location":"settings/#global-settings","title":"Global settings","text":""},{"location":"settings/#scope","title":"<code>Scope</code>","text":"<p>You can choose to manage only frontmatter fields or frontmatter and inline-fields (could be slower with very large files)</p> <p>Changing this setting requires the plugin to be reloaded.</p>"},{"location":"settings/#display-field-options-in-context-menu","title":"<code>Display field options in context menu</code>","text":"<p>if toggled <code>on</code> : Metadata Menu will display one control item per field in the target note in the context menu. That could result in a very large context menu if the target note has many fields</p> <p>if toggled <code>off</code> : Metadata Menu will display a \"Field Options\" item in the context menu. You can access control items through a modal display by clicking on \"Field Options\".</p>"},{"location":"settings/#globally-ignored-fields","title":"<code>Globally ignored fields</code>","text":"<p>the fields listed here (comma separated) won't be available in context menus</p>"},{"location":"settings/#exclusions","title":"<code>Exclusions</code>","text":"<p>You can exclude files based on their path, their extension or their name based on a regex pattern</p>"},{"location":"settings/#first-day-of-week","title":"<code>First day of week</code>","text":"<p>For <code>Date</code> fields' datepicker, select the day the week should start with (default <code>Monday</code>)</p>"},{"location":"settings/#preset-field-settings","title":"Preset Field settings","text":"<p>If you want a field to be globally managed throughout your whole vault you can <code>add a new field setting</code>: - Click on \"+\" - Type the field name - Select the type of field - Set the options</p>"},{"location":"settings/#fileclass-settings","title":"Fileclass settings","text":"<p>If you want the same field to have different behaviours depending on the note they belong to, you can define field settings based on the \"class\" of the \"note\". This is a particular frontmatter attribute that you will have to give to your note. By default, this attribute is named <code>fileClass</code></p> <p>A FileClass is a specific note located in a defined folder. In this note you will set the fields settings for each note that has a <code>fileClass</code> attribute equal to the name of the <code>fileClass</code> note (without .md extension).</p> <p>See # Fileclass section for details about how to write a fileClass</p>"},{"location":"settings/#fileclass-files-folder","title":"fileClass files folder","text":"<p>In Metadata Menu, you'll have to set the location of <code>fileClass</code> notes: type the path to the fileClass files folder in the <code>class Files Path</code> setting (don't forget the trailing slash)</p>"},{"location":"settings/#fileclass-alias","title":"fileClass alias","text":"<p>You may find usefull to combine the fileClass attribute with an other attribute that you already use to categorize your notes (category, type, kind, area, ....). </p> <p>You can give an alias to fileClass attribute in <code>fileClass field alias</code> setting so that you can use the same name to manage the fields and for your other current usage.</p>"},{"location":"settings/#global-fileclass","title":"Global fileClass","text":"<p>You can define a fileClass that will be applicable to all of your notes, even if there is no fileClass attribute defined in their frontmatter.</p> <p>This is usefull if you are more confortable with setting your preset fields in a note rather than in the plugin settings.</p> <p>If global fileClass is null or unproperly configured, the preset fields defined in the plugin settings will have the priority.</p>"},{"location":"settings/#result-per-page","title":"Result per page","text":"<p>Default number of files per page in the table view and code blocks</p>"},{"location":"settings/#add-a-fileclass-after-create","title":"Add a fileclass after create","text":"<p>Toggle on to display the fileclass list to choose from to be added to a new file</p>"},{"location":"settings/#fileclass-selector-in-note-fields-modal","title":"Fileclass selector in note fields modal","text":"<p>You can hide the fileClass selector automatically added to the note fields modal since it can be duplicated with fileclass inheritance or global fileclass</p>"},{"location":"settings/#fileclass-queries","title":"fileClass queries","text":"<p>You can define fileClasses to be applicable to every file matching a dataview query. (same syntax as for <code>File</code> type fields)</p> <p>If a File matches several queries, the last matching fileClass (starting from the top) will be applicable to this file.</p>"},{"location":"settings/#show-extra-button-to-access-metadata-menu-form","title":"Show extra button to access metadata menu form","text":"<p>When a note has one or more fileClass you can display a button next to the note's :  - links in reading mode - links in live preview - file in file explorer (will also toggle the \"Fileclass folder add button\") - reference in search panel - reference in backlinks panel - tab header - properties</p> <p>each option has its own toggler</p>"}]}